package project4;

import static org.junit.Assert.*;

import org.junit.Test;

public class EditorTesting {
	
	/**********************************************************************
	 * Tests whether the insertBefore command works when the list is empty 
	 * and when the current is on top
	 **********************************************************************/
	@Test
	public void testProcessCommandInsertBefore(){
		Editor ed = new Editor();
		for(int i = 1; i <= 15000; i++){
			ed.processCommand("b Line " + i);
			assertTrue(("Line " + i).equals(ed.getCurrentLine()));
		}
	}
	
	/**************************************************************************
	 * Tests whether insertBefore works when the current line is in the middle
	 * of the test
	 **************************************************************************/
	@Test
	public void testProcessCommandInsertBefore2(){
		Editor ed = new Editor();
		for(int i = 1; i <= 15000; i++){
			ed.processCommand("b Line" + i);
		}
		ed.processCommand("m");
		for(int i = 1; i <= 1500; i++){
			ed.processCommand("b Line " + i);
			assertTrue(("Line " + i).equals(ed.getCurrentLine()));
		}
	}
	
	/*******************************************************************
	 * Tests whether the insert after last works when the list is empty
	 * and on the last line of the list
	 *******************************************************************/
	@Test
	public void testProcessCommandInsertAfterLast(){
		Editor ed = new Editor();
		for(int i = 1; i <= 15000; i++){
			ed.processCommand("i Line " + i);
			assertTrue(("Line " + i).equals(ed.getCurrentLine()));
		}
	}
	
	/**************************************
	 * Tests the move current down command
	 **************************************/
	@Test
	public void testProcessCommandMoveCurrentDown(){
		Editor ed = new Editor();
		for(int i = 1; i <= 15000; i++){
			ed.processCommand("b Line " + i);
		}
		for(int i = 15000; i >= 1; i--){
			assertTrue(("Line " + i).equals(ed.getCurrentLine()));
			ed.processCommand("m");

		}
	}

	/**************************************************
	 * Tests whether the move current up command works
	 **************************************************/
	@Test
	public void testProcessCommandMoveCurrentUp(){
		Editor ed = new Editor();
		for(int i = 1; i<= 15000; i++){
			ed.processCommand("i Line " + i);
		}
		for(int i = 15000; i >= 1; i--){
			assertTrue(("Line " + i).equals(ed.getCurrentLine()));
			ed.processCommand("u");
		}
	}
	
	/***************************************************************
	 * Tests if the remove command works when removing single lines
	 ***************************************************************/
	@Test
	public void testProcessCommandRemoveSingle(){
		Editor ed = new Editor();
		for(int i = 1; i <= 15000; i++){
			ed.processCommand("b Line " + i);
		}
		for(int i = 14999; i >= 1; i--){
			ed.processCommand("r");
			assertTrue(("Line " + i).equals(ed.getCurrentLine()));
		}
	}
	
	
}
